name: iOS Release - Mobile App

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

  pre-build:
    runs-on: ubuntu-latest
    needs: test
    name: pre-build
    steps:
      - name: Get current timestamp
        id: getCurrentTimestamp
        run: echo "::set-output name=date::$(date +%s)"
    outputs:
      date: ${{ steps.getCurrentTimestamp.outputs.date }}


  build-ios-prod:
    runs-on: macos-11
    needs: pre-build
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.3'

      - name: Write p12 certificate
        shell: bash
        run: |
          echo "$P12_B64" | base64 --decode > ios/cert.p12
        env:
          P12_B64: ${{ secrets.P12_B64 }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-filepath: "ios/cert.p12"
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Install the provisioning profile
        env:
          PROD_IOS_PROVISIONING_PROFILE_B64: ${{ secrets.PROD_IOS_PROVISIONING_PROFILE_B64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/frfabriquesocialgouvpassemploi.mobileprovision
          echo -n "$PROD_IOS_PROVISIONING_PROFILE_B64" | base64 --decode --output $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cd ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Write Google configuration for ios
        shell: bash
        run: |
          mkdir -p ios/firebase-config/prod
          echo "$PROD_GOOGLE_SERVICE_IOS_B64" | base64 --decode > ios/firebase-config/prod/GoogleService-Info.plist
        env:
          PROD_GOOGLE_SERVICE_IOS_B64: ${{ secrets.PROD_GOOGLE_SERVICE_IOS_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$PROD_RUNTIME_ENV_B64" | base64 --decode > env/.env.prod
        env:
          PROD_RUNTIME_ENV_B64: ${{ secrets.PROD_RUNTIME_ENV_B64 }}

      - name: Write prod plist files
        shell: bash
        run: |
          echo "$PROD_OPTIONS_PLIST_B64" | base64 --decode > ios/ProdOptionsPlist.plist
        env:
          PROD_OPTIONS_PLIST_B64: ${{ secrets.PROD_OPTIONS_PLIST_B64 }}

      - name: Write staging plist files (required for xcodebuild to succeed)
        shell: bash
        run: |
          echo "$STAGING_OPTIONS_PLIST_B64" | base64 --decode > ios/StagingOptionsPlist.plist
        env:
          STAGING_OPTIONS_PLIST_B64: ${{ secrets.STAGING_OPTIONS_PLIST_B64 }}

      - name: Write Apple prod API Key
        shell: bash
        run: |
          mkdir ~/.private_keys
          echo "$APPLE_PROD_API_KEY_B64" | base64 --decode > ~/.private_keys/AuthKey_"$APPLE_PROD_API_KEY".p8
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_KEY_B64: ${{ secrets.APPLE_PROD_API_KEY_B64 }}

      - name: Build iOS IPA
        run: |
          flutter pub get
          flutter build ipa \
          --flavor prod \
          --build-number=${{ needs.pre-build.outputs.date }} \
          --export-options-plist=ios/ProdOptionsPlist.plist

      #      - name: Build iOS application bundle
      #        run: |
      #          flutter pub get
      #          flutter build ios \
      #          --flavor prod \
      #          --build-number=${{ needs.pre-build.outputs.date }} \
      #          --release --no-codesign

      #- name: Build xArchive
      #  run: |
      #    xcodebuild -workspace ios/Runner.xcworkspace -scheme prod \
      #    -configuration Release-prod DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
      #    -sdk 'iphoneos' \
      #    -destination 'generic/platform=iOS' \
      #    -archivePath build-output/app.xcarchive PROVISIONING_PROFILE_SPECIFIER=$APPLE_PROVISIONING_PROFILE_ID \
      #    clean archive CODE_SIGN_IDENTITY="iPhone Distribution: Fabrique numerique des ministeres sociaux"
      #    xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ProdOptionsPlist.plist
      #  env:
      #    APPLE_TEAM_ID: 76GBKHVK25
      #    APPLE_PROVISIONING_PROFILE_ID: 76GBKHVK25.fr.fabrique.social.gouv.passemploi

      - name: Deploy to App Store Connect
        run: |
          xcrun altool --upload-app --file build/ios/ipa/pass_emploi_app.ipa \
          -t ios \
          --apiKey "$APPLE_PROD_API_KEY" \
          --apiIssuer "$APPLE_PROD_API_ISSUER"
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}